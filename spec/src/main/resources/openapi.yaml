openapi: 3.0.3
info:
  title: DeepStrike - Battleship API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api

paths:
  /api/games:
    post:
      summary: Create a new game
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hostPlayerId
              properties:
                hostPlayerId:
                  type: string
      responses:
        '201':
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameCreatedResponse'
    get:
      summary: List all games
      operationId: listGames
      parameters:
        - name: playerId
          in: query
          required: false
          schema:
            type: string
          description: Filter games where player is player1 or player2
      responses:
        '200':
          description: List of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameSummaryResponse'

  /api/games/{gameId}:
    get:
      summary: Get by Id
      operationId: detail
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: playerId
          required: true
          schema:
            type: string
        - in: query
          name: version
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: game details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameDetailResponse'
  /api/games/{gameId}/join:
    post:
      summary: Player joins the game
      operationId: joinGame
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinGameRequest'
      responses:
        '204':
          description: Player joined the game
  /api/games/{gameId}/fleet:
    post:
      summary: Place player's fleet
      operationId: placeFleet
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - playerId
                - ships
              properties:
                playerId:
                  type: string
                ships:
                  type: array
                  items:
                    $ref: '#/components/schemas/Ship'
      responses:
        '200':
          description: Fleet placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetDeploymentResponse'

  /api/games/{gameId}/ready:
    post:
      summary: Mark player as ready
      operationId: markPlayerReady
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPlayerReadyRequest'
      responses:
        '204':
          description: Player ready
  /api/games/{gameId}/shots:
    post:
      summary: Shoot at opponent's coordinate
      operationId: shootAtCoordinate
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - playerId
                - target
              properties:
                playerId:
                  type: string
                target:
                  $ref: '#/components/schemas/Coordinate'
      responses:
        '200':
          description: Shot resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShotResultResponse'

components:
  schemas:
    MarkPlayerReadyRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
    JoinGameRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
    GameDetailResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        status:
          type: string
        rules:
          $ref: '#/components/schemas/Ruleset'
        player1:
          $ref: '#/components/schemas/Player'
        player2:
          $ref: '#/components/schemas/Player'
        currentTurn:
          type: string
        winner:
          type: string
    Player:
      type: object
      properties:
        id:
          type: string
        board:
          $ref: '#/components/schemas/PlayerBoard'
    GameResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        status:
          type: string
        currentTurn:
          type: string
        winner:
          type: string

    GameSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        version:
          type: integer
    Coordinate:
      type: object
      properties:
        x:
          type: integer
        y:
          type: integer

    Ship:
      type: object
      properties:
        type:
          type: string
          enum: [ CARRIER, BATTLESHIP, DESTROYER, SUBMARINE, PATROL_BOAT ]
        bow:
          $ref: '#/components/schemas/Coordinate'
        orientation:
          type: string
          enum: [HORIZONTAL, VERTICAL]
    ShipPlaced:
      type: object
      properties:
        type:
          type: string
        footprint:
          type: array
          items:
            $ref: '#/components/schemas/Coordinate'
        hits:
          type: array
          items:
            $ref: '#/components/schemas/Coordinate'
    ShipSpec:
      type: object
      properties:
        size:
          type: integer
        quantity:
          type: integer
        type:
          type: string
          enum: [ CARRIER, BATTLESHIP, DESTROYER, SUBMARINE, PATROL_BOAT ]
    Ruleset:
      type: object
      properties:
        boardSize:
          type: integer
        fleet:
          type: array
          items:
            $ref: '#/components/schemas/ShipSpec'
    PlayerBoard:
      type: object
      properties:
        ships:
          type: array
          items:
            $ref: '#/components/schemas/ShipPlaced'
        shotsReceived:
          type: array
          items:
            $ref: '#/components/schemas/Coordinate'
    GameCreatedResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
    FleetDeploymentResponse:
      type: object
      properties:
        ships:
          type: array
          items:
            $ref: '#/components/schemas/ShipDeployment'
      required:
        - ships
    ShipDeployment:
      type: object
      properties:
        type:
          type: string
          enum: [ CARRIER, BATTLESHIP, DESTROYER, SUBMARINE, PATROL_BOAT ]
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Coordinate'
      required:
        - type
        - coordinates
    ShotResultResponse:
      type: object
      properties:
        result:
          type: string
          enum: [HIT, MISS, SUNK]
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message